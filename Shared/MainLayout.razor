@using System.Threading
@inherits LayoutComponentBase
<h1 id="explanation">
    This is a dice roller where you can configure and roll dice of various count, color, and shape. The intention is
    that this tool
    can replace the dice for most die based games. It gives good summarization of each roll hopefully making it easy to
    interpret the
    results for your game. Additionally, it lets you view your previous rolls in a historical roll view.
</h1>
<img type="image" id="dieDots" src="{1}.svg" />
<img type="image" id="dieDots" src="{2}.svg" />
<img type="image" id="dieDots" src="{3}.svg" />
<img type="image" id="dieDots" src="{4}.svg" />
<img type="image" id="dieDots" src="{5}.svg" />
<img type="image" id="dieDots" src="{6}.svg" />
<div class="page">
    <div class="sidebar mainPanel">
        <table id="configureTable">
            <tr>
                <th style="width:60px">Shape</th>
                <th style="width:10eX">Count</th>
                <th>Color</th>
                <th>Side Count</th>
                <th style="width:8eX">Delete</th>
            </tr>
            @for (int i = 0; i < Dice.Count; i++)
            {
                int index = i;
                <tr>
                    <td>
                        <input type="image" id="icon" src="{@GetShape(Dice[index].SideCount)}.svg">
                    </td>
                    <td><input type="number" id="smallInput" min="1" @bind=@Dice[index].Count></td>
                    <td>
                        @for (int j = 0; j < DefaultColors.Length; j++)
                        {
                            int colorIndex = j;
                            string borderColor = Dice[index].Color == DefaultColors[colorIndex] ? "#545454" : "white";
                            <button id="colorSelect"
                        style="background-color: #@DefaultColors[colorIndex]; border-color: @borderColor"
                        @onclick="() => SetColor(index, DefaultColors[colorIndex])"></button>
                        }
                    </td>
                    <td>
                        @foreach (int shape in Shapes)
                        {
                            int sideCount = shape;
                            string color = shape == Dice[index].SideCount ? "#65ED99" : "lightgrey";
                            <button id="selectShape" style="background-color: @color"
                        @onclick="() => SetSideCount(index, sideCount)">@sideCount</button>
                        }
                        <input type="number" name="dieColor" @bind=@Dice[index].SideCount id="smallInput" min="1">
                    </td>
                    <td><input type="image" src="x.svg" id="delete" @onclick="() => Delete(index)"></input></td>
                </tr>
            }
            <tr>
                <input type="image" src="Plus.svg" id="plusButton" @onclick="AddDie" />
            </tr>
        </table>
    </div>

    <div class="verticalGroup">
        <div class="main mainPanel">
            <button id="roll" @onclick="Roll">ROLL</button>
            <DiceBox>
                @foreach (DiceDetails die in Dice)
                {
                    @for (int i = 0; i < die.Count; i++)
                    {
                        <div id="diceSquare">
                            @if (die.SideCount == 6)
                            {
                                <img type="image" id="dieDots" src="{@die.GetValueAt(i)}.svg" style="background-color: #@die.Color;" />
                            }
                            else
                            {
                                <h1 id="dieText" style="background-color:#@die.Color">@die.GetValueAt(i)</h1>
                            }
                            <input type="image" id="smallDie" src="{@GetShape(die.SideCount)} Side.svg">
                        </div>
                    }
                }
            </DiceBox>
        </div>

        <div class="stats mainPanel">
            <h4 id="title">Totals</h4>
            @foreach (DiceDetails die in Dice)
            {
                <div id="diceSquare" title="@die.Sum">
                    <h1 id="dieText" style="background-color:#@die.Color"> @die.Sum</h1>
                    <input type="image" id="smallDie" src="{@GetShape(die.SideCount)} Side.svg">
                </div>
            }
        </div>

        <div class="history mainPanel">
            <h4 id="title">History</h4>
            @for (int i = History.Count - 1; i >= 0; i--)
            {
                int turn = i + 1;
                string highlight = CurrentHistoryIndex == turn - 1 ? "border-width: 3px" : "border-width: 0px";
                <div id="historyBox">
                    <button @onclick="() => ViewTurn(turn-1)" id="viewHistoryButton" style=@highlight>@turn</button>
                </div>
            }
        </div>
    </div>
</div>

@code {
    public List<DiceDetails> Dice = new List<DiceDetails> { };
    public int CurrentHistoryIndex;
    public List<List<DiceDetails>> History = new List<List<DiceDetails>>();

    protected override void OnInitialized()
    {
        Dice.Add(BuildDefaultDie());
    }

    public class DiceDetails
    {
        public DiceDetails()
        {
            this.Values = new List<int>();
        }

        private List<int> Values;
        public void AddValue(int value)
        {
            this.Values.Add(value);
            Sum += value;
        }

        public void RemoveValueAt(int index)
        {
            Sum -= this.Values[index];
            this.Values.RemoveAt(index);
        }

        public int GetValueAt(int index)
        {
            return Values[index];
        }

        public void SetValueAt(int index, int value)
        {
            int difference = value - Values[index];
            Sum += difference;
            Values[index] = value;
        }

        private int sideCount;
        public int SideCount
        {
            get
            {
                return sideCount;
            }
            set
            {
                sideCount = Math.Abs(value);

                if (Values == null)
                {
                    return;
                }

                for (int i = 0; i < Values.Count; i++)
                {
                    if (Values[i] > SideCount)
                    {
                        SetValueAt(i, sideCount);
                    }
                }
            }
        }
        public string Color;
        private int count;
        public int Count
        {
            get
            {
                return count;
            }
            set
            {
                count = Math.Abs(value);
                while (count < Values.Count)
                {
                    RemoveValueAt(Values.Count - 1);
                }

                while (count > Values.Count)
                {
                    AddValue(1);
                }
            }
        }
        public int Sum { get; private set; }

        public DiceDetails Copy()
        {
            return new DiceDetails
            {
                Color = this.Color,
                Count = this.Count,
                SideCount = this.SideCount,
                Values = new List<int>(this.Values),
                Sum = this.Sum,
            };
        }
    }

    public int[] Shapes = new int[] { 4, 6, 8, 10, 12, 20, };
    public string[] DefaultColors = new string[] { "dbdbdb", "2a2a2a", "db7065", "de8355", "EDD157", "77cd7f", "6ccdc5",
"5F8BE9",
"9973c2", "db82d7"};

    public void AddDie()
    {
        Dice.Add(BuildDefaultDie());
    }

    public void Roll()
    {
        Random random = new Random();
        for (int i = 0; i < Dice.Count; i++)
        {
            for (int j = 0; j < Dice[i].Count; j++)
            {
                Dice[i].SetValueAt(j, random.Next(1, Dice[i].SideCount + 1));
            }
        }
        History.Add(CopyDiceDetails());
        CurrentHistoryIndex = History.Count - 1;
    }

    public void Delete(int index)
    {
        this.Dice.RemoveAt(index);
    }

    public void SetSideCount(int i, int sideCount)
    {
        Dice[i].SideCount = sideCount;
    }

    public void SetColor(int i, string color)
    {
        Dice[i].Color = color;
    }

    public string GetShape(int sideCount)
    {
        switch (sideCount)
        {
            case (4):
                return "Tetrahedron";
            case (6):
                return "Cube";
            case (8):
                return "Octahedron";
            case (10):
                return "Pentagonal Trapezohedron";
            case (12):
                return "Dodecahedron";
            case (20):
                return "Icosahedron";
            default:
                return "Unformable";
        }
    }

    public void ViewTurn(int turnCount)
    {
        this.Dice = History[turnCount];
        this.CurrentHistoryIndex = turnCount;
    }

    private DiceDetails BuildDefaultDie()
    {
        return new DiceDetails
        {
            Color = DefaultColors[new Random().Next(0, DefaultColors.Length)],
            SideCount = 6,
            Count = 1,
        };
    }

    private List<DiceDetails> CopyDiceDetails()
    {
        List<DiceDetails> copy = new List<DiceDetails>();
        foreach (DiceDetails diceDetails in Dice)
        {
            copy.Add(diceDetails.Copy());
        }
        return copy;
    }
}